package sr;

option java_package = "eu.stosdev.sr";

message Message {

    required Type type = 1;

    enum Type {
        Insert = 2;
        Preorder = 3;
        GetValue = 4;
        GetCount = 5;
        SetData = 6;
        Clear2 = 7;
        PushRightSubTree = 8;
        PushLeftSubTree = 9;
        PullLeftSubTree = 10;
        PullRightSubTree = 11;
        SetLeftSubTree = 12;
        SetRightSubTree = 13;
        RotateWithLeftChild = 14;
        RotateWithRightChild = 15;
        SetSubTree = 16;
        GetHeight = 17;
        GetSubtree = 18;
        Remove = 19;
        FindLesserSuccessor = 20;
        Contains = 21;
        InitBackup = 22;
        EndBackup = 23;
    }

    enum Branch {
        Left = 0;
        Right = 1;
        Both = 2;
    }

    optional Insert insert = 4;
    optional Remove remove = 5;
    optional DataNodeMessage dataNode = 6;
    optional Branch branch = 7;
    optional PabloSubtree subtree = 8;
    optional InitBackup initBackup = 9;
}

message InitBackup {
    required int64 timestamp = 1;
}

message Response {
    required Message.Type type = 1;

    optional string stringValue = 2;
    optional int32 intValue = 3;
    optional bool booleanValue = 8;
    optional PabloSubtree subtree = 4;
    optional DataNodeMessage dataNode = 5;
}

message Tree {
    required int32 id = 1;
    required string ip = 2;
    required int32 port = 3;
}

message Hello {
    required int32 id = 1;
    repeated Tree tree = 2;
    optional int64 lastSucessfullBackup = 3;
}

message InitSystemMessage {
    required string ip = 1;
    required int32 port = 2;
}

message AddWord {
    required string word = 1;
}

message RemoveWord {
    required string word = 1;
}

message Insert {
    required string word = 1;
}

message Remove {
    required string word = 1;
}

message DataNodeMessage {
    required int32 counter = 1;
    required string word = 2;
}

message PabloSubtree {
    optional DataNodeMessage node = 1;

    optional PabloSubtree left = 2;
    optional PabloSubtree right = 3;
}

message Subtree {
    repeated DataNodeMessage node = 1;

    enum Child {
        LEFT = 0;
        RIGHT = 1;
    }
    optional Child child = 2;
}

message Dummy {
}

message MessageToRoot {
    enum Type {
        Heartbeat = 0;
        AddWord = 1;
        RemoveWord = 2;
    }

    required Type type = 1;

    optional string word = 2;
}

message BackupAction {
    enum Type {
        AddWord = 0;
        RemoveWord = 1;
    }
    required Type type = 1;
    required string word = 2;
}

message MessageFromRoot {
    required bool reset = 1;
}
